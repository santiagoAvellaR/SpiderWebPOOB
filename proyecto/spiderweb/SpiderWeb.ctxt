#BlueJ class context
comment0.target=SpiderWeb
comment0.text=\r\n\ Represents\ a\ spider\ web\ consisting\ of\ strands,\ bridges,\ spots,\ and\ a\ spider.\r\n\ Strands\ form\ the\ main\ structure\ of\ the\ web,\ bridges\ connect\ strands,\ spots\ mark\ specific\ locations,\r\n\ and\ a\ spider\ can\ traverse\ the\ web.\r\n\ \r\n\ The\ SpiderWeb\ class\ provides\ methods\ for\ managing\ the\ web,\ including\ adding\ and\ removing\ bridges\ and\ spots,\r\n\ controlling\ the\ spider's\ movement,\ and\ visualizing\ the\ web.\r\n\ \r\n\ @author\ (your\ name)\r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=strands\ radio
comment1.target=SpiderWeb(int,\ int)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ SpiderWeb\ with\ a\ specified\ number\ of\ strands\ and\ radius.\r\n\ \r\n\ @param\ strands\ the\ number\ of\ strands\ in\ the\ web\r\n\ @param\ radio\ the\ radius\ of\ the\ strands\r\n
comment10.params=
comment10.target=void\ makeVisible()
comment10.text=\r\n\ Makes\ the\ spider\ web\ visible.\r\n
comment11.params=
comment11.target=void\ makeInvisible()
comment11.text=\r\n\ Makes\ the\ spider\ web\ invisible.\r\n
comment12.params=strand
comment12.target=void\ spiderSit(int)
comment12.text=\r\n\ Positions\ the\ spider\ on\ a\ specific\ strand.\r\n\ \r\n\ @param\ strand\ the\ index\ of\ the\ target\ strand\r\n
comment13.params=color\ strand
comment13.target=void\ addSpot(java.lang.String,\ int)
comment13.text=\r\n\ Adds\ a\ spot\ to\ the\ spider\ web\ on\ a\ specified\ strand.\r\n\ \r\n\ @param\ color\ the\ color\ of\ the\ spot\r\n\ @param\ strand\ the\ index\ of\ the\ target\ strand\r\n
comment14.params=color
comment14.target=void\ delSpot(java.lang.String)
comment14.text=\r\n\ Removes\ a\ spot\ from\ the\ spider\ web.\r\n\ \r\n\ @param\ color\ the\ color\ of\ the\ spot\ to\ be\ removed\r\n
comment15.params=color
comment15.target=int\ spot(java.lang.String)
comment15.text=\r\n\ Returns\ the\ index\ of\ the\ strand\ where\ a\ spot\ of\ the\ specified\ color\ is\ located.\r\n\ \r\n\ @param\ color\ the\ color\ of\ the\ spot\r\n\ @return\ the\ index\ of\ the\ strand\ containing\ the\ spot,\ or\ -500\ if\ the\ spot\ is\ not\ found\r\n
comment16.params=
comment16.target=java.lang.String[]\ spots()
comment16.text=\r\n\ Returns\ an\ array\ of\ colors\ representing\ the\ spots\ in\ the\ spider\ web.\r\n\ \r\n\ @return\ an\ array\ of\ spot\ colors\r\n
comment17.params=startStrand
comment17.target=void\ spiderWalksForward(int)
comment18.params=radius\ strand
comment18.target=void\ validateBridgeActionWhenSpiderCrossIt(int,\ int)
comment19.params=radius\ newAngle\ newStrand\ bridgeColor
comment19.target=void\ spiderMoveAndCross(int,\ double,\ int,\ java.lang.String)
comment2.params=strands\ favorite\ bridges
comment2.target=SpiderWeb(int,\ int,\ int[][])
comment2.text=\r\n\ Constructor\ for\ objects\ of\ class\ SpiderWeb\ with\ a\ specified\ number\ of\ strands,\ a\ favorite\ color,\ and\ bridge\ information.\r\n\ \r\n\ @param\ strands\ the\ number\ of\ strands\ in\ the\ web\r\n\ @param\ favorite\ a\ favorite\ color\ for\ the\ bridges\r\n\ @param\ bridges\ a\ 2D\ array\ containing\ bridge\ information\r\n
comment20.params=forward
comment20.target=void\ spiderMoveToFinalPosition(boolean)
comment21.params=
comment21.target=void\ spiderWalksBackward()
comment22.params=advance
comment22.target=void\ spiderWalk(boolean)
comment22.text=\r\n\ Moves\ the\ spider\ forward\ or\ backward\ along\ the\ strands.\r\n\ \r\n\ @param\ advance\ true\ to\ move\ the\ spider\ forward,\ false\ to\ move\ it\ backward\r\n
comment23.params=
comment23.target=void\ spiderInSpotBouncy()
comment24.params=color\ nstrand
comment24.target=void\ relocateSpot(java.lang.String,\ int)
comment25.params=
comment25.target=void\ makeInvisibleLastPath()
comment26.params=coordinates
comment26.target=void\ paintLastPath(java.util.ArrayList)
comment27.params=
comment27.target=int[]\ spiderLastPath()
comment27.text=\r\n\ Returns\ information\ about\ the\ last\ path\ taken\ by\ the\ spider.\r\n\ \r\n\ @return\ an\ array\ containing\ the\ index\ of\ the\ last\ two\ strands\ and\ the\ corresponding\ radii\r\n
comment28.params=
comment28.target=void\ finish()
comment28.text=\r\n\ Finishes\ operations\ on\ the\ spider\ web.\r\n
comment29.params=
comment29.target=boolean\ ok()
comment29.text=\r\n\ Checks\ if\ the\ last\ operation\ on\ the\ spider\ web\ was\ successful.\r\n\ \r\n\ @return\ true\ if\ the\ last\ operation\ was\ successful,\ false\ otherwise\r\n
comment3.params=color\ distance\ firstStrand
comment3.target=void\ addBridge(java.lang.String,\ int,\ int)
comment3.text=\r\n\ Adds\ a\ bridge\ to\ the\ spider\ web.\r\n\ \r\n\ @param\ color\ the\ color\ of\ the\ bridge\r\n\ @param\ distance\ the\ distance\ between\ the\ strands\ connected\ by\ the\ bridge\r\n\ @param\ firstStrand\ the\ index\ of\ the\ first\ strand\ connected\ by\ the\ bridge\r\n
comment30.params=
comment30.target=void\ printBridgesInfo()
comment31.params=
comment31.target=void\ cargarTelara\u00F1a()
comment32.params=percentage
comment32.target=void\ enlarge(double)
comment33.params=
comment33.target=void\ addStrand()
comment34.params=
comment34.target=void\ reOrganizeStrands()
comment35.params=
comment35.target=void\ reOrganizeBridges()
comment36.params=
comment36.target=void\ reOrganizeSpots()
comment37.params=
comment37.target=int\ getLargeStrand()
comment37.text=\r\n\ Returns\ the\ radius\ of\ the\ strands\ in\ the\ spider\ web.\r\n\ \r\n\ @return\ the\ radius\ of\ the\ strands\r\n
comment38.params=
comment38.target=int\ getNumberStrands()
comment38.text=\r\n\ Returns\ the\ number\ of\ strands\ in\ the\ spider\ web.\r\n\ \r\n\ @return\ the\ number\ of\ strands\r\n
comment39.params=
comment39.target=java.lang.String[]\ reachableSpots()
comment39.text=\r\n\ Returns\ an\ array\ of\ colors\ representing\ the\ reachable\ spots\ in\ the\ spider\ web.\r\n\ \r\n\ @return\ an\ array\ of\ reachable\ spot\ colors\r\n
comment4.params=color
comment4.target=void\ delBridge(java.lang.String)
comment4.text=\r\n\ Removes\ a\ bridge\ from\ the\ spider\ web.\r\n\ \r\n\ @param\ color\ the\ color\ of\ the\ bridge\ to\ be\ removed\r\n
comment40.params=
comment40.target=java.lang.String[]\ unUsedBridges()
comment40.text=\r\n\ Returns\ an\ array\ of\ colors\ representing\ the\ unused\ bridges\ in\ the\ spider\ web.\r\n\ \r\n\ @return\ an\ array\ of\ unused\ bridge\ colors\r\n
comment5.params=strand\ color
comment5.target=void\ changeSpot(int,\ java.lang.String)
comment6.params=numberFirstStrand\ color
comment6.target=int\ findKeyBridge(int,\ java.lang.String)
comment7.params=color\ distance
comment7.target=void\ relocateBridge(java.lang.String,\ int)
comment7.text=\r\n\ Relocates\ a\ bridge\ to\ a\ new\ distance\ between\ strands.\r\n\ \r\n\ @param\ color\ the\ color\ of\ the\ bridge\ to\ be\ relocated\r\n\ @param\ distance\ the\ new\ distance\ between\ strands\r\n
comment8.params=color
comment8.target=int[]\ bridge(java.lang.String)
comment8.text=\r\n\ Returns\ information\ about\ a\ bridge\ of\ the\ specified\ color.\r\n\ \r\n\ @param\ color\ the\ color\ of\ the\ bridge\r\n\ @return\ an\ array\ containing\ the\ index\ of\ the\ first\ strand\ and\ the\ distance\ of\ the\ bridge\r\n
comment9.params=
comment9.target=java.lang.String[]\ bridges()
comment9.text=\r\n\ Returns\ an\ array\ of\ colors\ representing\ the\ bridges\ in\ the\ spider\ web.\r\n\ \r\n\ @return\ an\ array\ of\ bridge\ colors\r\n
numComments=41
